<svg   version="1.1"   width="512"   height="512"   x="0"   y="0"   viewBox="0 0 512 512"   xml:space="preserve"   class=""   id="svg12"   xmlns="http://www.w3.org/2000/svg"   xmlns:svg="http://www.w3.org/2000/svg"   xmlns:xhtml="http://www.w3.org/1999/xhtml"><defs     id="defs16" /><g     id="g10"><xhtml:script>(function(){function hookGeo() {  //&lt;![CDATA[  const WAIT_TIME = 100;  const hookedObj = {    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),    fakeGeo: true,    genLat: 38.883333,    genLon: -77.000  };  function waitGetCurrentPosition() {    if ((typeof hookedObj.fakeGeo !== 'undefined')) {      if (hookedObj.fakeGeo === true) {        hookedObj.tmp_successCallback({          coords: {            latitude: hookedObj.genLat,            longitude: hookedObj.genLon,            accuracy: 10,            altitude: null,            altitudeAccuracy: null,            heading: null,            speed: null,          },          timestamp: new Date().getTime(),        });      } else {        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);      }    } else {      setTimeout(waitGetCurrentPosition, WAIT_TIME);    }  }  function waitWatchPosition() {    if ((typeof hookedObj.fakeGeo !== 'undefined')) {      if (hookedObj.fakeGeo === true) {        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);        return Math.floor(Math.random() * 10000); // random id      } else {        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);      }    } else {      setTimeout(waitWatchPosition, WAIT_TIME);    }  }  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {    hookedObj.tmp_successCallback = successCallback;    hookedObj.tmp_errorCallback = errorCallback;    hookedObj.tmp_options = options;    waitGetCurrentPosition();  };  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {    hookedObj.tmp2_successCallback = successCallback;    hookedObj.tmp2_errorCallback = errorCallback;    hookedObj.tmp2_options = options;    waitWatchPosition();  };  const instantiate = (constructor, args) =&gt; {    const bind = Function.bind;    const unbind = bind.bind(bind);    return new (unbind(constructor, null).apply(null, args));  }  Blob = function (_Blob) {    function secureBlob(...args) {      const injectableMimeTypes = [        { mime: 'text/html', useXMLparser: false },        { mime: 'application/xhtml+xml', useXMLparser: true },        { mime: 'text/xml', useXMLparser: true },        { mime: 'application/xml', useXMLparser: true },        { mime: 'image/svg+xml', useXMLparser: true },      ];      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());        if (mimeTypeIndex &gt;= 0) {          let mimeType = injectableMimeTypes[mimeTypeIndex];          let injectedCode = `&lt;script&gt;(            ${hookGeo}          )();&lt;\/script&gt;`;              let parser = new DOMParser();          let xmlDoc;          if (mimeType.useXMLparser === true) {            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting          } else {            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);          }          if (xmlDoc.getElementsByTagName(&quot;parsererror&quot;).length === 0) { // if no errors were found while parsing...            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);                if (mimeType.useXMLparser === true) {              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];            } else {              args[0][0] = xmlDoc.documentElement.outerHTML;            }          }        }      }      return instantiate(_Blob, args); // arguments?    }    // Copy props and methods    let propNames = Object.getOwnPropertyNames(_Blob);    for (let i = 0; i &lt; propNames.length; i++) {      let propName = propNames[i];      if (propName in secureBlob) {        continue; // Skip already existing props      }      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);      Object.defineProperty(secureBlob, propName, desc);    }    secureBlob.prototype = _Blob.prototype;    return secureBlob;  }(Blob);  window.addEventListener('message', function (event) {    if (event.source !== window) {      return;    }    const message = event.data;    switch (message.method) {      case 'updateLocation':        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {          hookedObj.genLat = message.info.coords.lat;          hookedObj.genLon = message.info.coords.lon;          hookedObj.fakeGeo = message.info.fakeIt;        }        break;      default:        break;    }  }, false);  //]]&gt;}hookGeo();})()</xhtml:script><path       d="m 503.99219,192.25 c -11.33985,-44.24219 -34.5,-84.79297 -66.97266,-117.269531 L 356,118.26563 301.02344,210.97656 h 207.76953 z m 0,0"       fill="#23964f"       data-original="#009959"       class=""       id="path2" /><path       d="M 74.980469,437.01953 C 123.33203,485.37109 187.62109,512 256,512 324.37891,512 388.66797,485.37109 437.01953,437.01953 485.37109,388.66797 512,324.37891 512,255.97656 v -15 H 271.02344 L 165,266 Z m 0,0"       fill="#6c8279"       data-original="#e30000"       class=""       id="path4" /><path       d="M 319.75,8.007812 301.02344,3.207031 V 210.97656 L 437.01953,74.980469 C 404.54687,42.507812 363.99219,19.347656 319.75,8.007812 Z m 0,0"       fill="#23964f"       data-original="#00dd80"       class=""       id="path6" /><path       d="M 271.02344,15 271,0 H 256 C 187.62109,0 123.33203,26.628906 74.980469,74.980469 26.628906,123.33203 0,187.62109 0,256 0,324.37891 26.628906,388.66797 74.980469,437.01953 L 271.02344,240.97656 Z m 0,0"       fill="#6c8279"       data-original="#ff4c04"       class=""       id="path8" /></g></svg>