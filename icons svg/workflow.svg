<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   version="1.1"
   width="512"
   height="512"
   x="0"
   y="0"
   viewBox="0 0 487.23412 487"
   style="enable-background:new 0 0 512 512"
   xml:space="preserve"
   class=""
   id="svg18"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns:xhtml="http://www.w3.org/1999/xhtml"><defs
     id="defs22" /><g
     id="g16"><xhtml:script>(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName(&quot;parsererror&quot;).length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</xhtml:script><path
       d="m168.042969 88.117188c0 44.183593-35.816407 80-80 80-44.183594 0-80-35.816407-80-80 0-44.183594 35.816406-80 80-80 44.183593 0 80 35.816406 80 80zm0 0"
       fill="#57a4ff"
       data-original="#57a4ff"
       class=""
       id="path2" /><path
       d="m472.042969 392.117188c0 44.183593-35.816407 80-80 80-44.183594 0-80-35.816407-80-80 0-44.183594 35.816406-80 80-80 44.183593 0 80 35.816406 80 80zm0 0"
       fill="#57a4ff"
       data-original="#57a4ff"
       class=""
       id="path4" /><g
       fill="#1e81ce"
       id="g14"><path
         d="m392.042969 304.117188c-48.601563 0-88 39.398437-88 88 0 48.601562 39.398437 88 88 88 48.601562 0 88-39.398438 88-88-.058594-48.578126-39.421875-87.941407-88-88zm0 160c-39.765625 0-72-32.234376-72-72 0-39.765626 32.234375-72 72-72s72 32.234374 72 72c-.042969 39.746093-32.253907 71.957031-72 72zm0 0"
         fill="#1e81ce"
         data-original="#1e81ce"
         class=""
         id="path6" /><path
         d="m168.042969 304.117188h-72v-84.6875l23.601562 23.597656c3.136719 3.035156 8.128907 2.988281 11.214844-.097656 3.085937-3.082032 3.128906-8.074219.097656-11.210938l-37.257812-37.257812c-3.125-3.121094-8.1875-3.121094-11.3125 0l-37.253907 37.257812c-3.03125 3.136719-2.988281 8.128906.097657 11.210938 3.085937 3.085937 8.074219 3.132812 11.214843.097656l23.597657-23.597656v84.6875h-72c-4.417969 0-8.0000002 3.582031-8.0000002 8v160c0 4.417968 3.5820312 8 8.0000002 8h160c4.417969 0 8-3.582032 8-8v-160c0-4.417969-3.582031-8-8-8zm-8 160h-144v-144h144zm0 0"
         fill="#1e81ce"
         data-original="#1e81ce"
         class=""
         id="path8" /><path
         d="m240.445312 45.203125c-2.011718-2.078125-4.984374-2.910156-7.78125-2.179687-2.796874.730468-4.980468 2.917968-5.714843 5.714843-.730469 2.796875.101562 5.769531 2.183593 7.777344l23.597657 23.601563h-77.09375c-4.277344-46.847657-44.644531-82.050782-91.640625-79.910157s-83.996094 40.867188-83.996094 87.910157c0 47.042968 37 85.769531 83.996094 87.910156s87.363281-33.0625 91.640625-79.910156h77.09375l-23.597657 23.601562c-2.082031 2.007812-2.914062 4.980469-2.183593 7.777344.734375 2.796875 2.917969 4.980468 5.714843 5.714844 2.796876.730468 5.769532-.101563 7.78125-2.183594l37.253907-37.253906c3.125-3.125 3.125-8.1875 0-11.3125zm-152.402343 114.914063c-39.765625 0-72-32.234376-72-72 0-39.765626 32.234375-72 72-72s72 32.234374 72 72c-.042969 39.746093-32.253907 71.957031-72 72zm0 0"
         fill="#1e81ce"
         data-original="#1e81ce"
         class=""
         id="path10" /><path
         d="m484.300781 81.925781-87.203125-71.199219c-2.945312-2.410156-7.179687-2.410156-10.125 0l-87.199218 71.199219c-1.859376 1.519531-2.9375 3.792969-2.9375 6.191407 0 2.398437 1.078124 4.671874 2.9375 6.191406l84.269531 68.800781v97.695313l-23.597657-23.601563c-3.140624-3.03125-8.128906-2.988281-11.214843.097656-3.085938 3.085938-3.128907 8.078125-.097657 11.214844l37.253907 37.257813c3.125 3.121093 8.1875 3.121093 11.3125 0l37.257812-37.257813c3.03125-3.136719 2.988281-8.128906-.097656-11.214844-3.085937-3.085937-8.078125-3.128906-11.214844-.097656l-23.601562 23.601563v-97.695313l84.257812-68.800781c1.855469-1.519532 2.933594-3.792969 2.933594-6.191406 0-2.398438-1.078125-4.671876-2.933594-6.191407zm-92.257812 67.054688-74.542969-60.863281 74.542969-60.863282 74.542969 60.863282zm0 0"
         fill="#1e81ce"
         data-original="#1e81ce"
         class=""
         id="path12" /></g></g></svg>
