// <auto-generated />
using System;
using MVWorkflows.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MVWorkflows.Infrastructure.Migrations
{
    [DbContext(typeof(BlazorHeroContext))]
    partial class BlazorHeroContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MVWorkflows.Application.Models.Audit.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Chat.ChatHistory<MVWorkflows.Application.Models.Identity.BlazorHeroUser>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("ChatHistory");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Identity.BlazorHeroRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "Identity");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Identity.BlazorHeroRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Identity.BlazorHeroUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDepart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEmbauche")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JoursDeCongeRestantAvant")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Matricule")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureDataUrl")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.RH.Groupement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionGroupement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdTypeGroupement")
                        .HasColumnType("int");

                    b.Property<string>("IntituleGroupement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomGroupement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdTypeGroupement");

                    b.ToTable("Groupement", "RH");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.RH.HistoriqueAffectationPersonnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEffetAffectation")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteAffectation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonnelAffecteUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PosteDestinationId")
                        .HasColumnType("int");

                    b.Property<int>("PosteSourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonnelAffecteUserId");

                    b.HasIndex("PosteDestinationId");

                    b.HasIndex("PosteSourceId");

                    b.ToTable("HistoriqueAffectationPersonnel", "RH");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.RH.Poste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionPoste")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdGroupement")
                        .HasColumnType("int");

                    b.Property<string>("IntitulePoste")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomPoste")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosteActualOwnerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PosteSuperieurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdGroupement");

                    b.HasIndex("PosteActualOwnerUserId");

                    b.HasIndex("PosteSuperieurId");

                    b.ToTable("Poste", "RH");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.RH.ProfilPoste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PosteId")
                        .HasColumnType("int");

                    b.Property<int>("ProfilId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PosteId");

                    b.HasIndex("ProfilId");

                    b.ToTable("ProfilPoste", "RH");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.RH.Profils", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionProfil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomProfil")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Profils", "RH");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.RH.TypeGroupement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionTypeGroupement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntituleTypeGroupement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomTypeGroupement")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeGroupement", "RH");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Workflows.WorkflowInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateInitiation")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkflowInstantiatorUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkflowsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowInstantiatorUserId");

                    b.HasIndex("WorkflowsId");

                    b.ToTable("WorkflowInstance", "Workflows");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Workflows.WorkflowInstanceActionData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("WokflowsInstanceActionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WokflowsInstanceActionId");

                    b.ToTable("WorkflowInstanceActionData", "Workflows");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Workflows.WorkflowInstanceActionFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionFileRecordedByUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("FileContent")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MIMEType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WorkflowInstanceActionsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionFileRecordedByUserID");

                    b.HasIndex("WorkflowInstanceActionsId");

                    b.ToTable("WorkflowInstanceActionFile", "Workflows");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Workflows.WorkflowInstanceActionNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionNoteTakedByUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WorkflowInstanceActionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WorkflowInstanceActionsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionNoteTakedByUserID");

                    b.HasIndex("WorkflowInstanceActionsId");

                    b.ToTable("WorkflowInstanceActionNote", "Workflows");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Workflows.WorkflowInstanceActions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionExecutedByUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Commentaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateAction")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEffetNouvelEtat")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("StateAfter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateBefore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WorkflowInstanceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionExecutedByUserID");

                    b.HasIndex("WorkflowInstanceId");

                    b.ToTable("WorkflowInstanceActions", "Workflows");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Workflows.WorkflowInstanceStakeHolder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("StakeHolderUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("WorkflowInstanceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StakeHolderUserID");

                    b.HasIndex("WorkflowInstanceId");

                    b.ToTable("WorkflowInstanceStakeHolder", "Workflows");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Workflows.Workflows", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionWorkflow")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NomWorkflow")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleWorkflow")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkflowImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("WorkflowOwnerUserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowOwnerUserID");

                    b.ToTable("Workflows", "Workflows");
                });

            modelBuilder.Entity("MVWorkflows.Domain.Entities.Catalog.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("MVWorkflows.Domain.Entities.Catalog.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageDataURL")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MVWorkflows.Domain.Entities.ExtendedAttributes.DocumentExtendedAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Decimal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Json")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("DocumentExtendedAttributes");
                });

            modelBuilder.Entity("MVWorkflows.Domain.Entities.Misc.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("MVWorkflows.Domain.Entities.Misc.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Chat.ChatHistory<MVWorkflows.Application.Models.Identity.BlazorHeroUser>", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.Identity.BlazorHeroUser", "FromUser")
                        .WithMany("ChatHistoryFromUsers")
                        .HasForeignKey("FromUserId");

                    b.HasOne("MVWorkflows.Application.Models.Identity.BlazorHeroUser", "ToUser")
                        .WithMany("ChatHistoryToUsers")
                        .HasForeignKey("ToUserId");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Identity.BlazorHeroRoleClaim", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.Identity.BlazorHeroRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.RH.Groupement", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.RH.TypeGroupement", "TypeGroupement")
                        .WithMany()
                        .HasForeignKey("IdTypeGroupement")
                        .IsRequired();

                    b.Navigation("TypeGroupement");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.RH.HistoriqueAffectationPersonnel", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.Identity.BlazorHeroUser", "PersonnelAffecteUser")
                        .WithMany()
                        .HasForeignKey("PersonnelAffecteUserId");

                    b.HasOne("MVWorkflows.Application.Models.RH.Poste", "PosteDestination")
                        .WithMany()
                        .HasForeignKey("PosteDestinationId")
                        .IsRequired();

                    b.HasOne("MVWorkflows.Application.Models.RH.Poste", "PosteSource")
                        .WithMany()
                        .HasForeignKey("PosteSourceId")
                        .IsRequired();

                    b.Navigation("PersonnelAffecteUser");

                    b.Navigation("PosteDestination");

                    b.Navigation("PosteSource");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.RH.Poste", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.RH.Groupement", "Groupement")
                        .WithMany()
                        .HasForeignKey("IdGroupement")
                        .IsRequired();

                    b.HasOne("MVWorkflows.Application.Models.Identity.BlazorHeroUser", "PosteActualOwnerUser")
                        .WithMany()
                        .HasForeignKey("PosteActualOwnerUserId");

                    b.HasOne("MVWorkflows.Application.Models.RH.Poste", "PosteSuperieur")
                        .WithMany()
                        .HasForeignKey("PosteSuperieurId")
                        .IsRequired();

                    b.Navigation("Groupement");

                    b.Navigation("PosteActualOwnerUser");

                    b.Navigation("PosteSuperieur");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.RH.ProfilPoste", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.RH.Poste", "Poste")
                        .WithMany()
                        .HasForeignKey("PosteId")
                        .IsRequired();

                    b.HasOne("MVWorkflows.Application.Models.RH.Profils", "Profil")
                        .WithMany()
                        .HasForeignKey("ProfilId")
                        .IsRequired();

                    b.Navigation("Poste");

                    b.Navigation("Profil");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Workflows.WorkflowInstance", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.Identity.BlazorHeroUser", "WorkflowInstantiatorUser")
                        .WithMany()
                        .HasForeignKey("WorkflowInstantiatorUserId");

                    b.HasOne("MVWorkflows.Application.Models.Workflows.Workflows", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workflow");

                    b.Navigation("WorkflowInstantiatorUser");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Workflows.WorkflowInstanceActionData", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.Workflows.WorkflowInstanceActions", "WorkflowInstanceActions")
                        .WithMany()
                        .HasForeignKey("WokflowsInstanceActionId")
                        .IsRequired();

                    b.Navigation("WorkflowInstanceActions");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Workflows.WorkflowInstanceActionFile", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.Identity.BlazorHeroUser", "ActionFileRecordedByUser")
                        .WithMany()
                        .HasForeignKey("ActionFileRecordedByUserID");

                    b.HasOne("MVWorkflows.Application.Models.Workflows.WorkflowInstanceActions", "WorkflowInstanceActions")
                        .WithMany()
                        .HasForeignKey("WorkflowInstanceActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionFileRecordedByUser");

                    b.Navigation("WorkflowInstanceActions");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Workflows.WorkflowInstanceActionNote", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.Identity.BlazorHeroUser", "ActionNoteTakedByUser")
                        .WithMany()
                        .HasForeignKey("ActionNoteTakedByUserID");

                    b.HasOne("MVWorkflows.Application.Models.Workflows.WorkflowInstanceActions", "WorkflowInstanceActions")
                        .WithMany()
                        .HasForeignKey("WorkflowInstanceActionsId");

                    b.Navigation("ActionNoteTakedByUser");

                    b.Navigation("WorkflowInstanceActions");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Workflows.WorkflowInstanceActions", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.Identity.BlazorHeroUser", "ActionExecutedByUser")
                        .WithMany()
                        .HasForeignKey("ActionExecutedByUserID");

                    b.HasOne("MVWorkflows.Application.Models.Workflows.WorkflowInstance", "WorkflowInstance")
                        .WithMany()
                        .HasForeignKey("WorkflowInstanceId")
                        .IsRequired();

                    b.Navigation("ActionExecutedByUser");

                    b.Navigation("WorkflowInstance");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Workflows.WorkflowInstanceStakeHolder", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.Identity.BlazorHeroUser", "StakeHolderUser")
                        .WithMany()
                        .HasForeignKey("StakeHolderUserID");

                    b.HasOne("MVWorkflows.Application.Models.Workflows.WorkflowInstance", "WorkflowInstance")
                        .WithMany()
                        .HasForeignKey("WorkflowInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StakeHolderUser");

                    b.Navigation("WorkflowInstance");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Workflows.Workflows", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.Identity.BlazorHeroUser", "WorkflowOwnerUser")
                        .WithMany()
                        .HasForeignKey("WorkflowOwnerUserID");

                    b.Navigation("WorkflowOwnerUser");
                });

            modelBuilder.Entity("MVWorkflows.Domain.Entities.Catalog.Product", b =>
                {
                    b.HasOne("MVWorkflows.Domain.Entities.Catalog.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("MVWorkflows.Domain.Entities.ExtendedAttributes.DocumentExtendedAttribute", b =>
                {
                    b.HasOne("MVWorkflows.Domain.Entities.Misc.Document", "Entity")
                        .WithMany("ExtendedAttributes")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("MVWorkflows.Domain.Entities.Misc.Document", b =>
                {
                    b.HasOne("MVWorkflows.Domain.Entities.Misc.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.Identity.BlazorHeroUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.Identity.BlazorHeroUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.Identity.BlazorHeroRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVWorkflows.Application.Models.Identity.BlazorHeroUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MVWorkflows.Application.Models.Identity.BlazorHeroUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Identity.BlazorHeroRole", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("MVWorkflows.Application.Models.Identity.BlazorHeroUser", b =>
                {
                    b.Navigation("ChatHistoryFromUsers");

                    b.Navigation("ChatHistoryToUsers");
                });

            modelBuilder.Entity("MVWorkflows.Domain.Entities.Misc.Document", b =>
                {
                    b.Navigation("ExtendedAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}
