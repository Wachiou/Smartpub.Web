@inject Microsoft.Extensions.Localization.IStringLocalizer<NavMenu> _localizer
@using System.Security.Claims

<UserCard />
<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home">@_localizer["Home"]</MudNavLink>

    <MudNavLink Href="https://codewithmukesh.com/blog/blazor-hero-quick-start-guide/" Target="_blank" Icon="@Icons.Material.Outlined.ReadMore">
        @_localizer["Quick Start Guide"]
    </MudNavLink>

    @if (_canViewDashboards)
    {
        <MudNavLink Href="/dashboard" Icon="@Icons.Material.Outlined.Dashboard">
            @_localizer["Dashboard"]
        </MudNavLink>
    }


    @if (_canViewWorkflows || _canViewWorkflowInstance || _canViewWorkflowInstanceActionData 
        || _canViewWorkflowInstanceActionFile || _canViewWorkflowInstanceActionNote 
        || _canViewWorkflowInstanceActions || _canViewWorkflowInstanceStakeHolder)
    {
        <MudListSubheader Class="mt-2 mb-n2" >@_localizer["Gestion Workflows"]</MudListSubheader>
        @if (_canViewWorkflows)
        {   
            <MudNavLink Href="/Workflows/Workflows" Target="_blank"  Icon="@CustomIcons.WorkflowsDark">
                @_localizer["Workflows"]
            </MudNavLink>
        }
        
        @if (_canViewWorkflowInstance)
        {
            <MudNavLink Href="/Workflows/WorkflowInstance" Target="_blank" Icon="@CustomIcons.WorkflowInstanceDark" >
                @_localizer["WorkflowInstance"]
            </MudNavLink>
        }

            <MudNavLink Href="/Workflows/WorkflowInstancesDemandeDeConge" Target="_blank" Icon="@CustomIcons.WorkflowInstanceDark" >
                Demande de congé
            </MudNavLink>

        @if (_canViewWorkflowInstanceActions)
        {
            <MudNavLink Href="/Workflows/WorkflowInstanceActions" Icon="@CustomIcons.WorkflowInstanceActionsDark" >
                @_localizer["WorkflowInstanceActions"]
            </MudNavLink>
        }

        @if (_canViewWorkflowInstanceActionNote)
        {
            <MudNavLink Href="/Workflows/WorkflowInstanceActionNote" Icon="@CustomIcons.WorkflowInstanceActionNoteDark" >
                @_localizer["WorkflowInstanceActionNote"]
            </MudNavLink>
        }

        @if (_canViewWorkflowInstanceActionData)
        {
            <MudNavLink Href="/Workflows/WorkflowInstanceActionData" Icon="@CustomIcons.WorkflowInstanceActionDataDark" >
                @_localizer["WorkflowInstanceActionData"]
            </MudNavLink>
        }

        @if (_canViewWorkflowInstanceActionFile)
        {
            <MudNavLink Href="/Workflows/WorkflowInstanceActionFile" Icon="@CustomIcons.WorkflowInstanceActionFileDark" >
                @_localizer["WorkflowInstanceActionFile"]
            </MudNavLink>
        }


        @if (_canViewWorkflowInstanceStakeHolder)
        {
            <MudNavLink Href="/Workflows/WorkflowInstanceStakeHolder" Icon="@CustomIcons.WorkflowInstanceStakeHolderDark" >
                @_localizer["WorkflowInstanceStakeHolder"]
            </MudNavLink>
        }

        @*@if (_canViewDocumentTypes)
            {
                <MudNavLink Href="/document-types" Icon="@Icons.Material.Outlined.FileCopy">
                    @_localizer["Document Types"]
                </MudNavLink>
            }*@
    }

    @if (_canViewPersonnel || _canViewPoste || _canViewProfils 
        || _canViewGroupement || _canViewTypeGroupement 
        || _canViewHistoriqueAffectationPersonnel || _canViewProfilsPoste)
    {
        <MudListSubheader Class="mt-2 mb-n2">@_localizer["Gestion RH"]</MudListSubheader>
        @if (_canViewPersonnel)
        {
            <MudNavLink Href="/RH/Personnel" Target="_blank" Icon="@CustomIcons.PersonnelDark" >
                @_localizer["Personnel"]
            </MudNavLink>
        }

        @if (_canViewPoste)
        {
            <MudNavLink Href="/RH/Poste" Target="_blank" Icon="@CustomIcons.PosteDark" >
                @_localizer["Poste"]
            </MudNavLink>
        }

        @if (_canViewProfils)
        {
            <MudNavLink Href="/RH/Profils" Icon="@CustomIcons.ProfilsDark" >
                @_localizer["Profils"]
            </MudNavLink>
        }

        @if (_canViewGroupement)
        {
            <MudNavLink Href="/RH/Groupement" Icon="@CustomIcons.GroupementDark" >
                @_localizer["Groupement"]
            </MudNavLink>
        }

        @if (_canViewTypeGroupement)
        {
            <MudNavLink Href="/RH/TypeGroupement" Icon="@CustomIcons.TypeGroupementDark" >
                @_localizer["TypeGroupement"]
            </MudNavLink>
        }


        @if (_canViewHistoriqueAffectationPersonnel)
        {
            <MudNavLink Href="/RH/HistoriqueAffectationPersonnel" Icon="@CustomIcons.HistoriqueAffectationPersonnelDark" >
                @_localizer["HistoriqueAffectationPersonnel"]
            </MudNavLink>
        }

        @if (_canViewProfilsPoste)
        {
            <MudNavLink Href="/RH/ProfilsPoste" Icon="@CustomIcons.ProfilsPosteDark" >
                @_localizer["ProfilsPoste"]
            </MudNavLink>
        }
    }

    @if (_canViewHangfire || _canViewHangfire 
        || _canViewAuditTrails || _canViewUsers || _canViewRoles)
    {
        <MudListSubheader Class="mt-2 mb-n2">@_localizer["Gestion du Système & des utilisateurs"]</MudListSubheader>
        @if (_canViewHangfire)
        {
            <MudNavLink Href="/jobs" Target="_blank" Icon="@Icons.Material.Outlined.Work" >
                @_localizer["Hangfire"]
            </MudNavLink>
        }

        @if (_canViewSwagger)
        {
            <MudNavLink Href="/swagger/index.html" Target="_blank" Icon="@Icons.Material.Outlined.LiveHelp" >
                @_localizer["Swagger"]
            </MudNavLink>
        }
        @*@if (_canViewDocumentTypes)
            {
                <MudNavLink Href="/document-types" Icon="@Icons.Material.Outlined.FileCopy">
                    @_localizer["Document Types"]
                </MudNavLink>
            }*@

        @if (_canViewAuditTrails)
        {
            <MudNavLink Href="/audit-trails" Icon="@Icons.Material.Outlined.Security" >
                @_localizer["Audit Trails"]
            </MudNavLink>
        }

        @if (_canViewUsers)
        {
            <MudNavLink Href="/identity/users" Icon="@Icons.Material.Outlined.Person" >
                @_localizer["Users"]
            </MudNavLink>
        }
        @if (_canViewRoles)
        {
            <MudNavLink Href="/identity/roles" Icon="@Icons.Material.Outlined.Person" >@_localizer["Roles"]</MudNavLink>
        }
    }


    @*<MudListSubheader Class="mt-2 mb-n2">@_localizer["Personal"]</MudListSubheader>*@

    @*<MudNavLink Href="/account" Icon="@Icons.Material.Outlined.SupervisorAccount">
            @_localizer["Account"]
        </MudNavLink>*@

    @*@if (_canViewDocuments || _canViewDocumentTypes)
        {
            <MudListSubheader Class="mt-2 mb-n2">@_localizer["Document Management"]</MudListSubheader>
            @if (_canViewDocuments)
            {
                <MudNavLink Href="/document-store" Icon="@Icons.Material.Outlined.AttachFile">
                    @_localizer["Document Store"]
                </MudNavLink>
            }
            @if (_canViewDocumentTypes)
            {
                <MudNavLink Href="/document-types" Icon="@Icons.Material.Outlined.FileCopy">
                    @_localizer["Document Types"]
                </MudNavLink>
            }
        }*@

    @*@if (_canViewUsers || _canViewRoles)
        {
            <MudListSubheader Class="mt-2 mb-n2">@_localizer["Administrator"]</MudListSubheader>
            @if (_canViewUsers)
            {
                <MudNavLink Href="/identity/users" Icon="@Icons.Material.Outlined.Person">
                    @_localizer["Users"]
                </MudNavLink>
            }
            @if (_canViewRoles)
            {
                <MudNavLink Href="/identity/roles" Icon="@Icons.Material.Outlined.Person">@_localizer["Roles"]</MudNavLink>
            }
        }*@
    @if (_canViewChat)
    {
        <MudListSubheader Class="mt-2 mb-n2">@_localizer["Communication"]</MudListSubheader>
        <MudNavLink Href="/chat" Icon="@Icons.Material.Outlined.Chat">
            @_localizer["Chat"]
        </MudNavLink>
    }
    @*@if (_canViewProducts || _canViewBrands)
        {
            <MudListSubheader Class="mt-2 mb-n2">@_localizer["Catalog Management"]</MudListSubheader>
            @if (_canViewProducts)
            {
                <MudNavLink Href="/catalog/products" Icon="@Icons.Material.Outlined.CallToAction">
                    @_localizer["Products"]
                </MudNavLink>
            }
            @if (_canViewBrands)
            {
                <MudNavLink Href="/catalog/brands" Icon="@Icons.Material.Outlined.CallToAction">
                    @_localizer["Brands"]
                </MudNavLink>
            }
        }*@
</MudNavMenu>

@code {
    private ClaimsPrincipal _authenticationStateProviderUser;

    private bool _canViewHangfire;
    private bool _canViewDashboards;
    private bool _canViewDocuments;
    private bool _canViewDocumentTypes;
    private bool _canViewAuditTrails;
    private bool _canViewRoles;
    private bool _canViewUsers;
    private bool _canViewChat;
    private bool _canViewProducts;
    private bool _canViewBrands;
    private bool _canViewSwagger;

    #region Workflows
    //private bool _canViewEtapeRequiredInput;
    //private bool _canViewEtapesWorkflow;
    private bool _canViewWorkflowInstance;
    private bool _canViewWorkflowInstanceActionData;
    private bool _canViewWorkflowInstanceActionFile;
    private bool _canViewWorkflowInstanceActionNote;
    private bool _canViewWorkflowInstanceActions;
    private bool _canViewWorkflowInstanceStakeHolder;
    private bool _canViewWorkflows;
    #endregion

    #region RH
    private bool _canViewPoste;
    private bool _canViewPersonnel;
    private bool _canViewGroupement;
    private bool _canViewHistoriqueAffectationPersonnel;
    private bool _canViewTypeGroupement;
    private bool _canViewProfils;
    private bool _canViewProfilsPoste;
    #endregion

    protected override async Task OnParametersSetAsync()
    {
        _authenticationStateProviderUser = await _stateProvider.GetAuthenticationStateProviderUserAsync();
        _canViewHangfire = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Hangfire.View)).Succeeded;
        _canViewDashboards = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Dashboards.View)).Succeeded;
        _canViewDocuments = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Documents.View)).Succeeded;
        _canViewDocumentTypes = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.DocumentTypes.View)).Succeeded;
        _canViewAuditTrails = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.AuditTrails.View)).Succeeded;
        _canViewRoles = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Roles.View)).Succeeded;
        _canViewUsers = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Users.View)).Succeeded;
        _canViewChat = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Communication.Chat)).Succeeded;
        _canViewProducts = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Products.View)).Succeeded;
        _canViewBrands = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Brands.View)).Succeeded;
        _canViewSwagger = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Swagger.View)).Succeeded;


        #region Workflows
        //_canViewEtapeRequiredInput = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.EtapeRequiredInput.View)).Succeeded;
        //_canViewEtapesWorkflow = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.EtapesWorkflow.View)).Succeeded;
        _canViewWorkflows = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Workflows.View)).Succeeded;
        _canViewWorkflowInstance = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.WorkflowInstance.View)).Succeeded;
        _canViewWorkflowInstanceActionData = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.WorkflowInstanceActionData.View)).Succeeded;
        _canViewWorkflowInstanceActionFile = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.WorkflowInstanceActionFile.View)).Succeeded;
        _canViewWorkflowInstanceActionNote = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.WorkflowInstanceActionNote.View)).Succeeded;
        _canViewWorkflowInstanceActions = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.WorkflowInstanceActions.View)).Succeeded;
        _canViewWorkflowInstanceStakeHolder = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.WorkflowInstanceStakeHolder.View)).Succeeded;
        #endregion

        #region RH
        _canViewPoste = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Poste.View)).Succeeded;
        _canViewPersonnel = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Personnel.View)).Succeeded;
        _canViewGroupement = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Groupement.View)).Succeeded;
        _canViewHistoriqueAffectationPersonnel = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.HistoriqueAffectationPersonnel.View)).Succeeded;
        _canViewTypeGroupement = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.TypeGroupement.View)).Succeeded;
        _canViewProfils = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Profils.View)).Succeeded;
        _canViewProfilsPoste = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.ProfilsPoste.View)).Succeeded;
        #endregion
    }
}